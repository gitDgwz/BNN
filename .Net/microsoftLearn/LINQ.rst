LINQ
============

LINQ 查询与传统 foreach 循环相比具有三大优势：

    它们更简明、更易读，尤其在筛选多个条件时。

    它们使用最少的应用程序代码提供强大的筛选、排序和分组功能。

    无需修改或只需做很小的修改即可将它们移植到其他数据源。

**在 LINQ 中，查询变量本身不执行任何操作并且不返回任何数据。 它只是存储在以后某个时刻执行查询时为生成结果而必需的信息。**

查询变量本身从不保存查询结果,类似于只是保存了SQL语句,只是个查询规则.

::

    //evenNumQuery就是查询变量,IEnumerable<T>类型
    var evenNumQuery = from num in numbers
                   where (num % 2) == 0
                   select num;

    //并且可以直接使用foreach，
    foreach (int num in numQuery)
    {
        Console.Write("{0,1} ", num);
    }

执行方式
--------------------

标准查询运算符方法的 LINQ to Objects 实现主要通过两种方法之一执行：立即执行和延迟执行。 

立即执行其实就是声明加调用，延迟执行就是先声明后再用。哪些方法是立即哪些是延迟是官方已经设计好的。

立即执行
^^^^^^^^^^^^^^^^^^^

立即执行指的是读取数据源并执行一次运算.

Count、Max、Average 和 First 就属于此类查询.

| 可以使用 Enumerable.ToList 或 Enumerable.ToArray 方法强制任何查询立即执行.
| 还可以通过在紧跟查询表达式之后的位置放置一个 foreach 循环来强制执行查询。 

延迟执行
^^^^^^^^^^^^^^^^^^^

"延迟执行提供了查询重用功能，因为在每次循环访问查询结果时，查询都会从数据源中提取更新的数据."

延迟执行的查询运算符可以进一步分为两种类别：流式处理和非流式处理。

流式处理

    一边读取源数据，一边生成。

非流式处理

    读取所有源数据之后再生成结果。排序或分组等运算均属于此类别。



