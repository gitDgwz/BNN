git命令
===================


git配置
---------------------------------------------
添加提交人的信息,好让别人知道是谁提交的

``git config --global``

    |   local(省略):本地配置,只对当前的仓库有效
    |   global:全局配置,所有仓库生效
    |   system:系统配置,对所有用户生效

    |   ``user.name "Jasper Yang"``
    |   ``user.email geekhall.cn@gmail.com``
    |   ``credential.helper store``
    |   ``--list``

    例子 ``git config --global --list``

创建仓库
-----------------
两种方法,一种是init,一种是clone,会创建一个.git文件 ,linux终端 ``ls -a`` [1]_ 可以看到,
里面包含仓库的一些重要信息,请勿乱改

``git init`` 初始化当前目录,不会清空文件夹,只是创建git所需文件.
可以在后面在跟一个目录名,他会再创建一个子目录并初始化

``git clone`` 克隆一个远程仓库,后面跟仓库的网址


Git的工作区域和文件状态
-------------------------

=============== =============== ==============
工作区           暂存区           本地仓库
=============== =============== ==============
.git所在目录     .git/index      .git/objects
git add ->      git commit ->                
=============== =============== ==============


=============== =============== =============== ===============
未跟踪              未修改          已修改          已暂存
=============== =============== =============== ===============
git add ->        /                 git add ->    /
       /               /        <- git checkout <- git reset
=============== =============== =============== ===============

添加和提交文件
--------------------------------------
创建一个新文件,可以看到status里面有一个未跟踪的文件,使用add可以将他添加到暂存区,
commit只会提交暂存区的文件.

``git status`` 查看git状态

``git add`` 添加更改到暂存区

    ``git add .`` 全部添加

    ``git add *.txt`` 添加所有txt文件

``git commit`` 提交更改,如不使用-m 将会进入vim编辑模式,在第一行键入提交信息

    ``git commit -m "message"`` 提交并提供更改信息

    ``git commit -am "message"`` 添加更改并提交

``git log`` 查看提交日志

    ``git log  --oneline`` 查看简洁的提交日志

reset回退版本
-----------------------------
reset回退版本,有三种模式,一般soft用来合并版本,hard用来弃用版本,mixed用来修改提交.
git的所有操作都可以回溯

``git reset`` 

    ``git reset --soft HEAD^`` 回退到上个版本

    ``git reset --hard ID`` 回退到某个ID的版本,用log查看版本ID

    ``git reset HEAD^`` 省略则为mixed模式,回到上个版本

======== ======== ======== ========
 /        --soft   --hard   --mixed
======== ======== ======== ========
工作区      √         ×       √
暂存区       √          ×      ×
======== ======== ======== ========

``git ls-files`` 查看仓库里的文件

``git reflog`` 查看引用记录(操作历史记录)

diff查看差异
------------------------------------------
查看工作区,暂存区,本地仓库之间的差异.查看不同版本之间的差异.
查看分支之间的差距

``git diff``

    ``git diff`` 查看工作区和暂存区的区别

    ``git diff HEAD`` 查看工作区和版本库的区别

    ``git diff --cached`` 查看暂存区和版本库的差别

    ``git diff ID1 ID2`` 查看两个版本之间的差距

    ``git diff ID HEAD`` 查看某个版本和当前版本的差距

    ``git diff HEAD~ HEAD`` 查看当前版本和上个版本的差别,波浪线和箭头功能一样

    ``git diff HEAD^2 HEAD`` 查看当前版本和上上个版本的差别

    ``git diff HEADA~3 HEAD someone.txt`` 查看当前版本和前面第三个版本某个文件的差别

rm删除
-------------------------
普通的删除只能删除工作区的文件,还需git add 添加删除更改,
git rm 则不需要.最后还是要提交

``git rm someone.*`` 删除本地和暂存区的文件

    ``git rm --cached someone.*`` 只删除暂存区中的文件

.gitignore忽略文件
---------------------------
不进行git上传的文件,仅仅存在于工作区.
在.gitignore文件中添加文件名(全称),或者文件夹/.

.gitignore的匹配规则

    空行或者以#开头的行会被GIt忽略,一般空行用于可读性的分隔,#为注释

    使用标准的Blob模式匹配:

        \*通配任意个字符

        \?匹配单个字符

        []表示匹配列表中的单个字符,如:[abc]表示a/b/c

        \*\*表示匹配任意的中间目录

        中括号可以使用短中线连接,比如:[0-9]表示任意一位数字

        \! 表示取反

    ::

        # 忽略所有 .a 文件
        *.a

        #但是跟踪所有的lib.a,即使前面忽略了.a文件
        !lib.a

        #只忽略当前目录下的TODO文件,而不忽略 subdir/TODO
        /TODO

        #忽略任何目录下名为build的文件夹
        build/

        #忽略 doc/notes.txt,但不忽略 doc/server/arch.txt
        doc/*.txt

        #忽略 doc/目录及其所有子目录下的.pdf文件
        doc/**/*.pdf

克隆仓库
-------------------------

``git clone`` 克隆仓库

``git push`` 将本地仓库推送到线上仓库

``git pull`` 将远程仓库拉取并且合并到本地仓库


关联本地仓库和远程仓库
-------------------------
在Github上创建一个干净为空的仓库,再在本地仓库文件夹中

``git remote``

    ``git remote add origin url`` 添加远程仓库

    ``git push -u origin main`` 推送到上游为main的分支,-u为设置默认关联关系,后续则可以不用-u

    ``git remote -v`` 查看当前仓库所对应的远程仓库的别名和地址

``git pull <远程仓库名> <远程分支名>:<本地分支名>`` 分支名相同可以省略

``git fetch`` 获取远程仓库的修改


分支简介和基本操作
-------------------------------

``git branch`` 查看所有分支

    ``git branch beta`` 创建一个名为beta的分支

    ``git branch -d beta`` 删除已完成合并的beta分支,如果beta没有被合并,则无法删除

    ``git branch -D beta`` 强制删除beta分支

``git checkout`` 更改分支,修改工作区,有文件恢复的功能

    ``git checkout beta`` 切换到beta分支上

    ``git checkout -b beta ID`` 恢复beta分支到ID版本

``git switch`` (推荐)切换分支,如果修改未提交,不改变工作区的内容,但是文件修改后,
如果已经提交,切换后会被覆盖内容,switch为保护修改的安全切换.

     ``git switch beta`` 切换到beta分支上

``git merge`` 合并不同分支的内容到当前分支中

    ``git merge beta`` 将beta分支的内容合并到当前分支中

解决合并冲突
-------------------------------
当两个分支的同一行出现了不同的修改,合并时候会出现冲突,

在冲突状态中使用以下方法解决:

#.  ``git status`` 查看冲突列表
#.  ``git diff`` 查看冲突具体内容
#.  打开冲突文件,留下想要的内容,去掉左键头,等号和右箭头
#.  ``git add`` 添加 
#.  ``git commit`` 提交后会自动合并

如果想取消合并使用 ``git merge --abort``

回退和rebase
-----------------------------------
rebase会找到两个分支的公共祖先节点,再将公共祖先后面所有的本分支节点转接到目标分支后面

#.  ``git switch dev`` 切换到开发分支
#.  ``git rebase main`` 将开发分支转接到main分支后面

会修改提交记录,不方便多人开发

分支管理和工作流模型
-------------------------------

git flow 工作流

    \Tag:1.0.1
        #.  主要版本:主要功能和重大更新
        #.  次版本:新的功能和更新,一般不影响现有功能
        #.  修订版本:小的修补,安全漏洞等等,通常不影响功能和接口

    *  main 主分支 **主要分支**
    *  hotfix 修补分支
    *  release 预发布分支
    *  develop 开发分支 **主要分支**
    *  feature-login-page 功能分支
    *  feature 功能分支




.. [1] linux系统 ls 列出当前目录里的文件名或目录名,-a 为列出所有文件包括隐藏文件