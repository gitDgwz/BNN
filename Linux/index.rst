linux
=============


开源系统,四大分支

*   debian

*   redhat

*   arch linux

*   opensuse

.. toctree:: 
    :glob:

    ./*

linux
---------------

\/bin目录存放的的是系统基本命令,一些二进制文件可执行文件,
binary的缩写,

\/etc目录存放的是系统和一些软件的配置文件,当你安装完一些软件后,
它的配置文件一般都是在这个目录下的

\/home是家目录,进入系统后的默认目录


linux命令
---------------

``echo`` 回显内容输出给一个文件,可以用来创建文件

    ``echo "hello"`` 将hello输出到终端

    例子 ``echo "hello" > file1.txt"`` 将hello输入到file1文件,如果没有该文件则创建

``touch`` 更新文件修改时间,如果没有该文件则创建

    例子 ``touch hello.txt`` 创建或更新文件

``cat`` 查看某个文件的内容,concatenate的缩写,连接

    ``cat hello.txt`` 查看hello文件的内容

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``ls`` 查看当前目录下的文件和文件夹

    ``ls -al`` 参数可以叠加

    ``-l`` 显示更详细的信息

        第一列表示文件的权限和类型:
            第一个字母:

                *   \- 表示普通文件

                *   \d 表示目录

                *   \l 表示链接文件
            
            其余九个字母:
            
                每三个为一组,rwx:read,write,execute,没有权限则是-

                *   第一组为所有者权限
                *   第二组为同组权限
                *   其他用户权限

                可用 :ref:`chomd命令<chmod>` 修改


        第二列为硬链接数:
            软链接和硬链接

            软链接: 

            *   类似快捷方式,并不存储文件的内容
            *   如果目标文件被删除则无法访问
            *   可以指向文件和目录

            硬链接: 

            *   本质上是一个指向文件系统中的另一个文件的指针,
                与原始文件共享相同的i节点,它们共享相同的文件内容,源文件和硬链接实际上是文件系统中同一个文件两个不同的名字
            *   修改其中一个另一个也会被修改,删除其中一个,另一个还可以访问.
            *   只能指向文件,不能指向目录

        .. note:: 
            **inode** (index node) :: 

                文件类型:例如,是一个文件,目录,还是链接.
                权限:文件的访问权限,如读写和执行权限
                所有者:文件的拥有着和组信息
                文件大小:文件的大小(字节数)
                时间戳:文件的创建时间,最后访问时间和最后修改时间
                数据块指针:指向实际存储文件数据的磁盘块的指针


    ``-a`` 查看包括隐藏的所有文件和目录

    ``-h`` 显示大小

    ``-t`` 修改时间排序

    ``-r`` 逆序

    ``-i`` 查看i节点,inode

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``ln`` 创建链接文件,默认为硬链接,link缩写

    ``-s`` 软链接

    ``ln -s hellow.txt link.txt`` 创建hellow.txt的链接文件link.txt


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. _chmod:

``chmod <mode> <file>..`` 修改文件权限,为change mode缩写

    mode:可以一起使用

        ``+x`` 添加执行权限

        ``+r`` 添加读权限

        ``+w`` 添加写权限

        ``u+x`` 拥有着添加执行权限

        ``g+r`` 组内添加读权限

        ``o+w`` 其他添加写权限

        ===== ===== ===== 
         u     g     o
        ===== ===== ===== 
        rwx    rwx  rwx
        421    421  421
        7        7  7
        rw-    r- -   -w-
        6       4     2  
        ===== ===== ===== 

        可以直接使用数字代替

        ``642`` 表示rw-,r- -,-w-权限

    例:

    ``chmod +x hello.txt`` 所有用户添加执行权限

    ``chmod 777 hello.txt`` 为此文件设置777权限

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``clear`` 清除终端信息

``pwd`` 显示当前目录,print working directory 

``cd`` 切换目录,change directory

    ``cd /`` 切换到根目录

    ``cd ..`` 到上层路径

    ``cd -`` 当刚才的路径

``cp`` 复制文件,无法直接复制目录,copy的缩写

    例 ``cp file1.txt file2.txt``

    ``-r`` 递归复制
    
        例子 ``cp -r folder1 folder_copy``


``mv`` 移动文件(目录)或者重命名文件,move的缩写

    例 ``mv file1.txt file3.txt``

``rm`` 删除文件,move的缩写

    例 ``rm file3.txt``

    ``-r`` 递归删除 

``mkdir`` 创建目录 make directory的缩写

    例 ``mkdir folder``

    ``-p`` 创建多级目录

        例 ``mkdir -p folder1/folder2``

``rmdir`` 删除目录,只能删除空目录,remove directory

``du`` 查看文件大小,disk usage

``tree`` 以树状图形式显示目录的结构,不是linux自带,需要安装



vi和vim
----------------------

三种模式

``vi hello.txt`` 进入示例文件,如果没有则创建

*   命令模式(command)
*   插入模式(insert)
*   尾行模式(last line)

=============== =============== ===============
插入模式            命令模式        尾行模式
=============== =============== ===============
    ESC  ->        <-输入i,a,o      <-ESC/回车
       /             输入:  ->        /
=============== =============== ===============

命令模式

    ``^`` 跳到行首

    ``$`` 跳到行尾

    ``yy`` 复制内容,可以在前面加入数字,表示复制几行

        ``3yy`` 复制三行

    ``p`` 粘贴内容,可以在前面加入数字,表示粘贴几次

        ``3p`` 粘贴三次

    ``dd`` 删除内容,可以在前面加入数字,表示删除几行

        ``3dd`` 删除三行

    翻页::
        
        Ctrl+f,forward,向前翻页

        Ctrl+b,backward,向后翻页

        Ctrl+u,up,向上翻页,半页

        Ctrl+d,down,向下翻页,半页

    ``G`` 跳转到最后一行

        ``100G`` 跳到第100行

    ``gg`` 跳转到第一行

    查找:

    ``/`` 从光标开始,向下查找,按n继续,

    ``?`` 从光标开始,向上查找,按n继续
    
        ``/hello`` 向下查找hello

        ``\c`` 不区分大小写

        ``?hello\c`` 查找hello,不区分大小写

    ``u`` undo,撤销 
        
尾行模式

    ``:w`` 保存

    ``:q`` 退出

    ``:set number`` 显示行号

    ``:set nu`` 显示行号,缩写
    
    ``:set nonumber`` 关闭行号

    ``:100`` 跳到第100行

    ``n1:n2s/old/new/g`` ,s表示替换,g表示全局,即一整行

        ``s/hello/world`` 如果只是替换当前行的第一个匹配词,
        可以省略n1:n2 
        
        ``1,$s/hello/world/g`` 从第一行到最后一行,替换所有的hello

vi配置

``vi .vimrc`` 创建vi的配置信息 

    在文件中添加 ``set nu`` 则自动显示行数